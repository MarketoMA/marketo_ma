<?php

/**
 * @file
 * Module functions for Marketo MA.
 */

define('MARKETO_MA_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");
define('MARKETO_MA_TRACKING_METHOD_DEFAULT', 'munchkin');
define('MARKETO_MA_WEBFORM_FIELD_DEFAULTS', "FirstName|First Name\nLastName|Last Name\nEmail|Email Address");

define('MARKETO_MA_SCHEMA_WEBFORM', 'marketo_ma_webform');
define('MARKETO_MA_WEBFORM_FIELD_ACTIVE', 'is_active');
define('MARKETO_MA_WEBFORM_FIELD_LEAD_SOURCE', 'lead_source');

define('MARKETO_MA_SCHEMA_WEBFORM_COMPONENT', 'marketo_ma_webform_component');
define('MARKETO_MA_WEBFORM_COMPONENT_KEY', 'marketo_ma_key');
define('MARKETO_MA_WEBFORM_COMPONENT_NONE', 'none');

/**
 * Implements hook_menu().
 */
function marketo_ma_menu() {
  // Module settings.
  $items['admin/config/search/marketo_ma'] = array(
    'title' => 'Marketo MA',
    'description' => 'Marketo MA configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('marketo_ma_admin_settings_form'),
    'access arguments' => array('administer marketo'),
    'file' => 'includes/marketo_ma.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function marketo_ma_permission() {
  return array(
    'administer marketo' => array(
      'title' => t('Administer Marketo MA'),
      'description' => t('Configure Marketo settings such as page visibility, Munchkin keys, and SOAP API endpoint'),
    ),
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function marketo_ma_cron_queue_info() {
  $queues = array();
  $queues['marketo_ma_lead'] = array(
    'worker callback' => '_marketo_ma_associate_lead_soap',
    'time' => 30,
  );
  return $queues;
}

/**
 * Adds lead information to be captured.
 * 
 * @param string $email
 *   A valid email address for this lead
 * @param array $data
 *   Key value pairs of data to be associated with this lead
 * @param bool $merge
 *   If TRUE, $data will be merged if $email already exists else $data will
 *   be replaced
 * 
 * @return bool
 *   Returns TRUE upon completion
 */
function marketo_ma_add_lead($email, $data = array(), $merge = FALSE) {
  $marketo_ma_data = array();
  if (isset($_SESSION['marketo_ma_data'])) {
    $marketo_ma_data = $_SESSION['marketo_ma_data'];
  }

  if ($merge && array_key_exists($email, $marketo_ma_data)) {
    $marketo_ma_data[$email]['data'] = array_merge($marketo_ma_data[$email]['data'], $data);
  }
  else {
    $marketo_ma_data[$email]['data'] = $data;
  }
  $marketo_ma_data[$email]['email'] = $email;

  // If the user executing this method is anonymous or is actually the lead
  // being modified we will pass along the _mkto_trk cookie value so any
  // activity associated with the cookie gets merged to the lead.
  global $user;
  if (($user->uid == 0 || $user->mail == $email) && isset($_COOKIE['_mkto_trk'])) {
    $marketo_ma_data[$email]['marketoCookie'] = $_COOKIE['_mkto_trk'];
  }

  $_SESSION['marketo_ma_data'] = $marketo_ma_data;
  return TRUE;
}

/**
 * Retrieves queued data.
 */
function marketo_ma_get_queue() {
  // Data looks like $queue[email] = array(key => value).
  return (isset($_SESSION['marketo_ma_data'])) ? $_SESSION['marketo_ma_data'] : array();
}

/**
 * Cleanup any mess we made or data we don't want to hold on to.
 */
function _marketo_ma_cleanup() {
  if (isset($_SESSION['marketo_ma_data'])) {
    unset($_SESSION['marketo_ma_data']);
  }
}

/**
 * Implements hook_page_alter().
 */
function marketo_ma_page_alter(&$page) {
  global $user;
  $marketo_ma_data = marketo_ma_get_queue();

  if ((_marketo_ma_visibility_pages() && _marketo_ma_visibility_roles($user)) || count($marketo_ma_data) > 0) {

    /*
     * @todo handle case where visibility = false, count > 0, and
     * tracking type != munchkin.. we don't need any tracking in this case
     */
    // Basic Munchkin tracking.
    _marketo_ma_output_tracking_code();

    foreach ($marketo_ma_data as $lead) {
      if (array_key_exists('email', $lead)) {
        _marketo_ma_associate_lead($lead);
      }
    }

    _marketo_ma_cleanup();
  }
}

/**
 * Adds basic tracking code to page.
 */
function _marketo_ma_output_tracking_code() {
  if (_marketo_ma_munchkin_is_configured()) {
    $marketo_ma_munchkin_account_id = variable_get('marketo_ma_munchkin_account_id');
    $marketo_ma_munchkin_javascript_library = '//' . str_replace(array(
        'http://',
        'https://',
        '//'), '', variable_get('marketo_ma_munchkin_javascript_library'));

    drupal_add_js(array(
      'marketo_ma' => array(
        'track' => TRUE,
        'key' => $marketo_ma_munchkin_account_id,
        'library' => $marketo_ma_munchkin_javascript_library),
      ), 'setting');
  }
}

/**
 * Determines which tracking method should be used.
 * 
 * @param array $lead
 *   An associative array containing lead data
 *   - email: The email address of this lead
 *   - data: An associative array containing marketo fields and their values
 *     - FirstName
 *     - LastName
 *   - marketoCookie: NULL or the value of $_COOKIE['_mkto_trk']
 */
function _marketo_ma_associate_lead($lead) {

  // Check to see if there is a default lead source we should apply.
  $source = variable_get('marketo_ma_munchkin_lead_source');
  if (!array_key_exists('LeadSource', $lead['data']) && $source !== '') {
    $lead['data']['LeadSource'] = $source;
  }

  $track = variable_get('marketo_ma_tracking_method');
  switch ($track) {
    case 'munchkin':
      _marketo_ma_associate_lead_munchkin($lead);
      break;

    case 'soap_async':
      _marketo_ma_queue_lead($lead);
      break;

    case 'soap':
    default:
      _marketo_ma_associate_lead_soap($lead);
      break;
  }
}

/**
 * Adds javascript required to track a lead.
 * 
 * @param array $lead
 *   Lead data
 */
function _marketo_ma_associate_lead_munchkin($lead) {
  if (_marketo_ma_munchkin_is_configured()) {
    $key = variable_get('marketo_ma_munchkin_api_private_key', NULL);

    if (variable_get('marketo_ma_logging', FALSE)) {
      watchdog('marketo', 'Associating lead !email [@method] <pre>@data</pre>', array(
        '!email' => $lead['email'],
        '@method' => 'munchkin',
        '@data' => print_r($lead['data'], TRUE)), WATCHDOG_INFO);
    }
    /*
     * Using sha1 here rather than sha256 recommended by
     * http://drupal.org/node/845876 as this is a Marketo requirement.
     */
    $hash = hash('sha1', $key . $lead['email']);
    $action = array(
      'action' => 'associateLead',
      'data' => $lead['data'],
      'hash' => $hash,
    );
    drupal_add_js(array('marketo_ma' => array('actions' => array($action))), 'setting');
  }
}

/**
 * Sends lead data using SOAP API.
 * 
 * @param array $lead
 *   Lead data
 * 
 * @throws Exception
 */
function _marketo_ma_associate_lead_soap($lead) {
  if (_marketo_ma_soap_is_configured()) {
    module_load_include('inc', 'marketo_ma', 'includes/marketo_ma.soap');

    $secret_key = variable_get('marketo_ma_soap_encryption_key');
    $access_key = variable_get('marketo_ma_soap_user_id');
    $soap_endpoint = variable_get('marketo_ma_soap_endpoint');

    if (array_key_exists('marketoCookie', $lead)) {
      $mkto_trk = $lead['marketoCookie'];
    }
    else {
      $mkto_trk = NULL;
    }

    try {
      $soap_settings = _marketo_ma_soap_proxy_settings();
      $soap_settings['trace'] = variable_get('marketo_ma_logging', FALSE);
      $client = new MarketoClient($access_key, $secret_key, $soap_endpoint, $soap_settings);
      $sync = $client->syncLead($lead['data'], $lead['email'], $mkto_trk, array('extendedResponse' => TRUE));
      if ($sync['success']) {
        if (variable_get('marketo_ma_logging', FALSE)) {
          watchdog('marketo', 'Associating lead !email [soap] <pre>@data @result</pre>', array(
            '!email' => $lead['email'],
            '@data' => print_r($lead['data'], TRUE),
            '@result' => print_r($sync['result'], TRUE),
            ), WATCHDOG_INFO);
        }
      }
      else {
        watchdog('marketo', 'Unable to sync lead !email [soap] <pre>@error</pre> Request XML: <pre>@request</pre> Response XML: <pre>@response</pre>', array(
          '!email' => $lead['email'],
          '@error' => $sync['result'],
          '@request' => $client->__getLastRequest(),
          '@response' => $client->__getLastResponse(),
          ), WATCHDOG_ERROR);
      }
    }
    catch (Exception $e) {
      watchdog('marketo', 'Unable to sync lead !email [soap] <pre>@error</pre>', array('!email' => $lead['email'], '@error' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }
}

/**
 * Add a lead to the queue for submission later.
 * 
 * @param array $lead
 *   Lead data
 * 
 * @return bool
 *   Returns TRUE if lead was successfully added to queue
 */
function _marketo_ma_queue_lead($lead) {
  if (variable_get('marketo_ma_logging', FALSE)) {
    watchdog('marketo', 'Queing lead !email [@method] <pre>@data</pre>', array(
      '!email' => $lead['email'],
      '@method' => 'queued',
      '@data' => print_r($lead['data'], TRUE)), WATCHDOG_INFO);
  }
  $queue = DrupalQueue::get('marketo_ma_lead', TRUE);
  $success = $queue->createItem($lead);
  return $success;
}

/**
 * Returns defined fields as an associative array useful for select options.
 * 
 * @return array
 *   Key/value pairs of defined Marketo fields
 */
function _marketo_ma_get_field_options($labels = TRUE, $sort = TRUE) {
  /*
   * marketo_ma_webform_fields is multi-line, pipe "|" delimited data
   * which needs to be parsed. First split it into rows of data.
   */
  $raw_options = preg_split('/(\r\n?|\n)/', trim(variable_get('marketo_ma_webform_fields', MARKETO_MA_WEBFORM_FIELD_DEFAULTS)));
  $options = array();

  // Loop over all the rows getting the keys and values for the fields.
  foreach ($raw_options as $row) {
    $field = explode('|', trim($row));
    if ($labels) {
      $options[trim($field[0])] = trim($field[1]) . ' (' . trim($field[0]) . ')';
    }
    else {
      $options[trim($field[0])] = trim($field[1]);
    }
  }
  if ($sort) {
    asort($options);
  }

  return $options;
}

/**
 * Retrieves fields from Marketo using SOAP API.
 * 
 * @return array
 *   Marketo fields
 */
function _marketo_ma_get_fields() {
  $result = array();
  if (_marketo_ma_soap_is_configured()) {
    module_load_include('inc', 'marketo_ma', 'includes/marketo_ma.soap');

    $secret_key = variable_get('marketo_ma_soap_encryption_key');
    $access_key = variable_get('marketo_ma_soap_user_id');
    $soap_endpoint = variable_get('marketo_ma_soap_endpoint');

    try {
      $client = new MarketoClient($access_key, $secret_key, $soap_endpoint, _marketo_ma_soap_proxy_settings());
      $result = $client->getFields();
      if (!$result) {
        watchdog('marketo', 'Unable to retrieve field information. Please check SOAP API configuration', WATCHDOG_ERROR);
      }
    }
    catch (Exception $e) {
      watchdog('marketo', 'Unable to retrieve field information. <pre>@error</pre>', array('error' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }

  return $result;
}

/**
 * Retrieves a lead from Marketo using SOAP API.
 *
 * @return array
 *   Marketo lead
 */
function marketo_ma_get_lead($key) {
  $result = array();
  if (_marketo_ma_soap_is_configured()) {
    module_load_include('inc', 'marketo_ma', 'includes/marketo_ma.soap');

    $secret_key = variable_get('marketo_ma_soap_encryption_key');
    $access_key = variable_get('marketo_ma_soap_user_id');
    $soap_endpoint = variable_get('marketo_ma_soap_endpoint');

    try {
      $client = new MarketoClient($access_key, $secret_key, $soap_endpoint, _marketo_ma_soap_proxy_settings());
      $result = $client->getLead($key);
      if (!$result && variable_get('marketo_ma_logging', FALSE)) {
        watchdog('marketo', 'Lead data not found for !key', array('!key' => $key), WATCHDOG_INFO);
      }
    }
    catch (Exception $e) {
      watchdog('marketo', 'Unable to retrieve lead information. <pre>@error</pre>', array('error' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }

  return $result;
}

/**
 * Retrieves lead activity from Marketo.
 *
 * @return array
 *   Marketo lead
 */
function marketo_ma_get_lead_activity($key) {
  $result = array();
  if (_marketo_ma_soap_is_configured()) {
    module_load_include('inc', 'marketo_ma', 'includes/marketo_ma.soap');

    $secret_key = variable_get('marketo_ma_soap_encryption_key');
    $access_key = variable_get('marketo_ma_soap_user_id');
    $soap_endpoint = variable_get('marketo_ma_soap_endpoint');

    try {
      $client = new MarketoClient($access_key, $secret_key, $soap_endpoint, _marketo_ma_soap_proxy_settings());
      $result = $client->getLeadActivity($key);
      if (!$result && variable_get('marketo_ma_logging', FALSE)) {
        watchdog('marketo', 'Lead data not found for !key', array('!key' => $key), WATCHDOG_INFO);
      }
    }
    catch (Exception $e) {
      watchdog('marketo', 'Unable to retrieve lead activity. <pre>@error</pre>', array('error' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }

  return $result;
}

/**
 * Tests to see if Marketo MA has a valid configuration.
 * 
 * @staticvar bool $configured
 * @return bool
 *   Returns TRUE if Munchkin settings are configured
 */
function _marketo_ma_is_configured() {
  static $configured;

  if (!isset($configured)) {
    $track = variable_get('marketo_ma_tracking_method');
    if (
      ($track == 'munchkin' & _marketo_ma_munchkin_is_configured()) ||
      ($track == 'soap' & _marketo_ma_soap_is_configured()) ||
      ($track == 'soap_async' & _marketo_ma_soap_is_configured())
    ) {
      $configured = TRUE;
    }
    else {
      $configured = FALSE;
    }
  }

  return $configured;
}

/**
 * Tests to see if munchkin is configured.
 * 
 * @staticvar bool $configured
 * @return bool
 *   Returns TRUE if Munchkin settings are configured
 */
function _marketo_ma_munchkin_is_configured() {
  static $configured;

  if (!isset($configured)) {
    if (
      variable_get('marketo_ma_munchkin_account_id', FALSE) &&
      variable_get('marketo_ma_munchkin_api_private_key', FALSE) &&
      variable_get('marketo_ma_munchkin_javascript_library', FALSE)
    ) {
      $configured = TRUE;
    }
    else {
      $configured = FALSE;
    }
  }
  return $configured;
}

/**
 * Tests to see if soap is configured.
 * 
 * @staticvar bool $configured
 * @return bool
 *   Returns TRUE is SOAP API settings are configured
 */
function _marketo_ma_soap_is_configured() {
  static $configured;

  if (!isset($configured)) {
    if (
      variable_get('marketo_ma_soap_encryption_key', FALSE) &&
      variable_get('marketo_ma_soap_endpoint', FALSE) &&
      variable_get('marketo_ma_soap_user_id', FALSE)
    ) {
      $configured = TRUE;
    }
    else {
      $configured = FALSE;
    }
  }
  return $configured;
}

/**
 * Based on page visibility setting determines if marketo should be included.
 */
function _marketo_ma_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {
    $visibility = variable_get('marketo_ma_visibility_pages', 0);
    $setting_pages = variable_get('marketo_ma_pages', MARKETO_MA_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase.
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }
  }
  return $page_match;
}

/**
 * Based on role visibility setting determines if marketo should be included.
 */
function _marketo_ma_visibility_roles($account) {
  static $role_match;

  // Cache visibility result if function is called more than once.
  if (!isset($role_match)) {
    $visibility = variable_get('marketo_ma_visibility_roles', 0);
    $enabled = $visibility;
    $roles = variable_get('marketo_ma_roles', array());

    if (array_sum($roles) > 0) {
      // One or more roles are selected.
      foreach (array_keys($account->roles) as $rid) {
        // Is the current user a member of one of these roles?
        if (isset($roles[$rid]) && $rid == $roles[$rid]) {
          // Current user is a member of a role that should be (in|ex)cluded.
          $enabled = !$visibility;
          break;
        }
      }
    }
    else {
      /*
       * No roles have been selected therefore we will return the visibility
       * setting itself. "Only selected" will be FALSE and "All except" TRUE
       */
      $enabled = $visibility;
    }
  }
  return $enabled;
}

/**
 * Returns SoapClient proxy settings if configured.
 * 
 * @return array
 *   Proxy settings
 */
function _marketo_ma_soap_proxy_settings() {
  static $proxy;

  if (!isset($proxy)) {
    $proxy = array();
    $proxy['proxy_host'] = variable_get('marketo_ma_soap_proxy_host', '');
    $proxy['proxy_port'] = variable_get('marketo_ma_soap_proxy_port', '');
    $proxy['proxy_login'] = variable_get('marketo_ma_soap_proxy_login', '');
    $proxy['proxy_password'] = variable_get('marketo_ma_soap_proxy_password', '');

    if (empty($proxy['proxy_host'])) {
      unset($proxy['proxy_host']);
    }
    if (empty($proxy['proxy_port'])) {
      unset($proxy['proxy_port']);
    }
    if (empty($proxy['proxy_login'])) {
      unset($proxy['proxy_login']);
    }
    if (empty($proxy['proxy_password'])) {
      unset($proxy['proxy_password']);
    }
  }

  return $proxy;
}
