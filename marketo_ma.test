<?php

class MarketoTestCase extends DrupalWebTestCase {

  public $admin_path;
  public $marketo_ma_users;

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp('marketo_ma');

    $permissions['basic'] = array();

    $permissions['marketo_ma_admin'] = array(
      'administer marketo'
    );

    foreach ($permissions as $user_key => $permissions) {
      $this->marketo_ma_users[$user_key] = $this->drupalCreateUser($permissions);
    }

    $this->admin_path = 'admin/config/search/marketo_ma';
  }

  /**
   * Implemenation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

}

/**
 * Tests the functionality of the Marketo module.
 */
class MarketoBasicModuleTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Module validation',
      'description' => 'Verify module can be enabled and has all the basics.',
      'group' => 'Marketo',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp('marketo_ma');
    $this->admin_path = 'admin/config/search/marketo_ma';
  }

  /**
   * Implemenation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  public function testPermission() {
    $permission = module_invoke('marketo_ma', 'permission');
    $this->assertTrue(is_array($permission), 'Permission hook returns array.');
    $this->assertTrue(array_key_exists('administer marketo', $permission), 'Permission is as expected.');
  }

  public function testMenu() {
    $menu = module_invoke('marketo_ma', 'menu');
    $this->assertTrue(array_key_exists($this->admin_path, $menu), 'Menu item found.');
  }

}

class MarketoModuleConfigTestCase extends MarketoTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Module configuration',
      'description' => 'Verify module can be configured.',
      'group' => 'Marketo',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp();

    $this->drupalLogin($this->marketo_ma_users['marketo_ma_admin']);
  }

  /**
   * Implemenation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  public function testBasicAccess() {
    $this->drupalLogin($this->marketo_ma_users['basic']);
    $this->drupalGet($this->admin_path);
    $this->assertResponse(403, 'Access denied for regular user.');
  }

  public function testAdminAccess() {
    $this->drupalGet($this->admin_path);
    $this->assertResponse(200, 'User is allowed to access the page.');
    $this->assertText('Tracking Options');
  }

  public function testSubmitWithoutValues() {
    $edit = array(
      'marketo_ma_tracking_method' => '',
      'marketo_ma_munchkin_lead_source' => '',
      'marketo_ma_visibility_pages' => 0,
      'marketo_ma_pages' => '',
      'marketo_ma_webform_fields' => '',
      'marketo_ma_munchkin_account_id' => '',
      'marketo_ma_munchkin_api_private_key' => '',
      'marketo_ma_soap_endpoint' => '',
      'marketo_ma_soap_user_id' => '',
      'marketo_ma_soap_encryption_key' => '',
    );
    $this->drupalPost($this->admin_path, $edit, 'Save configuration');
    $this->assertText('field is required', 'Fields are required');
  }

  public function testSubmitWithValues() {
    $marketo_ma_munchkin_lead_source = $this->randomName();
    $marketo_ma_pages = '*';
    $marketo_ma_webform_fields = 'Email|Email Address';
    $marketo_ma_munchkin_account_id = $this->randomName(3) . '-' . $this->randomName(3) . '-' . $this->randomName(3);
    $marketo_ma_munchkin_api_private_key = $this->randomName();
    $marketo_ma_soap_endpoint = 'http://' . $this->randomName() . '.example.com';
    $marketo_ma_soap_user_id = $this->randomName();
    $marketo_ma_soap_encryption_key = $this->randomName();

    $edit = array(
      'marketo_ma_tracking_method' => 'munchkin',
      'marketo_ma_munchkin_lead_source' => $marketo_ma_munchkin_lead_source,
      'marketo_ma_visibility_pages' => 0,
      'marketo_ma_pages' => $marketo_ma_pages,
      'marketo_ma_webform_fields' => $marketo_ma_webform_fields,
      'marketo_ma_munchkin_account_id' => $marketo_ma_munchkin_account_id,
      'marketo_ma_munchkin_api_private_key' => $marketo_ma_munchkin_api_private_key,
      'marketo_ma_soap_endpoint' => $marketo_ma_soap_endpoint,
      'marketo_ma_soap_user_id' => $marketo_ma_soap_user_id,
      'marketo_ma_soap_encryption_key' => $marketo_ma_soap_encryption_key,
    );

    $this->drupalGet($this->admin_path);
    foreach ($edit as $name => $value) {
      $this->assertFieldByName($name);
    }

    $this->drupalPost($this->admin_path, $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved', 'Configuration saved successfully.');

    foreach ($edit as $name => $value) {
      $this->assertFieldByName($name, $value);
    }
  }

}

/**
 * Tests the functionality of the Marketo Webform module.
 */
class MarketoWebformBasicModuleTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Webform module validation',
      'description' => 'Verify webform module can be enabled and has all the basics.',
      'group' => 'Marketo',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp('marketo_ma', 'marketo_ma_webform');
  }

  /**
   * Implemenation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  public function testTables() {
    $tables = array(
      'marketo_ma_webform',
      'marketo_ma_webform_component'
    );

    // Verify the necessary tables are in place.
    foreach ($tables as $table) {
      $this->assertTrue(db_table_exists($table), format_string('Table @table exists.', array('@table' => $table)));
    }

    // Disable and uninstall the webform module.
    module_disable(array('marketo_ma_webform'));
    drupal_uninstall_modules(array('marketo_ma_webform'));

    // With module uninstalled, tables should no longer exist.
    foreach ($tables as $table) {
      $this->assertFalse(db_table_exists($table), format_string('Table @table does not exist.', array('@table' => $table)));
    }
  }

}

/**
 * Tests the functionality of the Marketo Webform module.
 */
class MarketoWebformTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Webform integration',
      'description' => 'Verify webform integration.',
      'group' => 'Marketo',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp('webform', 'marketo_ma_webform');
  }

  /**
   * Implemenation of tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }

  /**
   * Test creating a new Webform node.
   */
  function testWebformCreate() {
    $settings = array(
      'title' => 'Test webform, no components',
      'type' => 'webform',
    );
    $node = $this->drupalCreateNode($settings);

    // Because this is a "webform" type node, it should have an entry in the
    // database even though it's using the default settings.
    $this->assertTrue($this->webformRecordExists($node->nid), t('Webform record made in the database for the new webform node.'));

    // Make a change to the node, ensure that the record stays intact.
    $node->title .= '!';
    node_save($node);
    $this->assertTrue($this->webformRecordExists($node->nid), t('Webform record still in the database after modifying webform node.'));
  }

  function webformRecordExists($nid) {
    return (bool) db_query("SELECT nid FROM {webform} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
  }

}
