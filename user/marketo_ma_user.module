<?php

/**
 * @file
 * Module functions for Marketo MA User.
 */

/**
 * Implements hook_admin_paths().
 */
function marketo_ma_user_admin_paths() {
  $paths = array(
    'user/*/marketo' => TRUE,
    'user/*/marketo/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_menu().
 */
function marketo_ma_user_menu() {
  $items['user/%user/marketo'] = array(
    'title' => 'Marketo',
    'page callback' => '_marketo_ma_user_display_lead',
    'page arguments' => array(1),
    'access callback' => 'marketo_ma_user_view_lead_data_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  $items['user/%user/marketo/lead'] = array(
    'title' => 'Lead',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['user/%user/marketo/activity'] = array(
    'title' => 'Activity',
    'page callback' => '_marketo_ma_user_display_lead_activity',
    'page arguments' => array(1),
    'access callback' => 'marketo_ma_user_view_lead_data_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function marketo_ma_user_permission() {
  return array(
    'access all marketo lead data' => array(
      'title' => t('View all lead data'),
      'description' => t('Allows viewing of Marketo lead and activity data for any user.'),
    ),
    'access own marketo lead data' => array(
      'title' => t('View own lead data'),
    ),
  );
}

/**
 * Access callback for viewing lead information.
 */
function marketo_ma_user_view_lead_data_callback($account) {
  global $user;
  return user_access('access all marketo lead data', $user) || (user_access('access own marketo lead data', $user) && $user->uid == $account->uid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function marketo_ma_user_form_marketo_ma_admin_settings_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'webform', 'includes/webform.admin');
  $form['marketo_ma_tabs']['marketo_ma_user'] = array(
    '#title' => t('User Integration'),
    '#type' => 'fieldset',
    '#weight' => 5,
  );
  $form['marketo_ma_tabs']['marketo_ma_user']['marketo_ma_user_triggers'] = array(
    '#title' => t('Trigger a lead update on the following events:'),
    '#type' => 'checkboxes',
    '#default_value' => variable_get('marketo_ma_user_triggers', array(
      'login' => 'login',
      'insert' => 'insert',
      'update' => 'update',
    )),
    '#options' => array(
      'login' => t('User login'),
      'insert' => t('User registration / creation'),
      'update' => t('User update'),
    ),
  );
  $form['marketo_ma_tabs']['marketo_ma_user']['marketo_ma_user_fieldmap'] = array(
    '#title' => t('User field mapping'),
    '#type' => 'fieldset',
    '#description' => t('When a lead update is triggered, the fields mapped below will be included in the data sent to Marketo. Select the associated Marketo field for each User field displayed.'),
    '#tree' => TRUE,
    '#theme' => 'marketo_ma_user_fieldmap',
  );

  $user_fields = field_info_instances('user', 'user');
  $fieldmap = variable_get('marketo_ma_user_fieldmap', array());
  $default_options = array(MARKETO_MA_WEBFORM_COMPONENT_NONE => '- None -');
  $marketo_options = _marketo_ma_get_field_options();
  $options = array_merge($default_options, $marketo_options);

  foreach ($user_fields as $key => $value) {
    $form['marketo_ma_tabs']['marketo_ma_user']['marketo_ma_user_fieldmap'][$key] = array(
      '#title' => check_plain($value['label'] . ' (' . $value['field_name'] . ')'),
      '#title_display' => 'invisible',
      '#type' => 'select',
      '#options' => $options,
    );
    if (array_key_exists($key, $fieldmap)) {
      if (!array_key_exists($fieldmap[$key], $options)) {
        $form['marketo_ma_tabs']['marketo_ma_user']['marketo_ma_user_fieldmap'][$key]['#options'] = array_merge(
          array($fieldmap[$key] => "Undefined Field ($fieldmap[$key])"), $options
        );
      }

      $form['marketo_ma_tabs']['marketo_ma_user']['marketo_ma_user_fieldmap'][$key]['#default_value'] = $fieldmap[$key];
    }
  }
}

/**
 * Implements hook_user_login().
 */
function marketo_ma_user_user_login(&$edit, $account) {
  $triggers = variable_get('marketo_ma_user_triggers', array());
  if (array_key_exists('login', $triggers) && $triggers['login'] && isset($account->mail)) {
    $data = _marketo_ma_user_get_mapped_fields($account);
    $data['Email'] = $account->mail;
    marketo_ma_add_lead($account->mail, $data);
  }
}

/**
 * Implements hook_user_insert().
 */
function marketo_ma_user_user_insert(&$edit, $account, $category) {
  $triggers = variable_get('marketo_ma_user_triggers', array());
  if (array_key_exists('insert', $triggers) && $triggers['insert'] && isset($account->mail)) {
    $data = _marketo_ma_user_get_mapped_fields($account);
    $data['Email'] = $account->mail;
    marketo_ma_add_lead($account->mail, $data);
  }
}

/**
 * Implements hook_user_update().
 */
function marketo_ma_user_user_update(&$edit, $account, $category) {
  $triggers = variable_get('marketo_ma_user_triggers', array());
  if (array_key_exists('update', $triggers) && $triggers['update'] && isset($account->mail)) {
    // @todo decide how to handle an email address change
    // See https://api.drupal.org/comment/23088#comment-23088
    // When email changes, can we create a new lead then merge the two?
    $data = _marketo_ma_user_get_mapped_fields($account);
    $data['Email'] = $account->mail;
    marketo_ma_add_lead($account->mail, $data);
  }
}

/**
 * Implements hook_field_delete_field().
 */
function marketo_ma_user_field_delete_field($field) {
  $fieldmap = variable_get('marketo_ma_user_fieldmap', array());
  unset($fieldmap[$field['field_name']]);
  variable_set('marketo_ma_user_fieldmap', $fieldmap);
}

/**
 * Returns Drupal user fields which have been mapped to Marketo fields.
 * 
 * @param $account
 * 
 * @return array
 */
function _marketo_ma_user_get_mapped_fields($account) {
  $data = array();
  $fieldmap = variable_get('marketo_ma_user_fieldmap', array());
  foreach ($fieldmap as $key => $value) {
    if ($value != 'none' && isset($account->{$key}['und'][0]['value'])) {
      $data[$value] = $account->{$key}['und'][0]['value'];
    }
  }
  return $data;
}

/**
 * Returns a formatted table of lead information.
 * 
 * @param $account
 * 
 * @return string
 */
function _marketo_ma_user_display_lead($account) {
  $leads = marketo_ma_get_lead($account->mail);
  return theme('marketo_ma_user_lead', array(
    'lead' => $leads,
    'email' => $account->mail,
    'fields' => _marketo_ma_get_field_options(FALSE, FALSE),
  ));
}

/**
 * Returns a formatted table of lead activity.
 * 
 * @param $account
 * 
 * @return string
 */
function _marketo_ma_user_display_lead_activity($account) {
  $activity = marketo_ma_get_lead_activity($account->mail);
  return theme('marketo_ma_user_activity', array('activity' => $activity, 'email' => $account->mail));
}

/**
 * Implements hook_theme().
 */
function marketo_ma_user_theme() {
  $theme = array(
    'marketo_ma_user_fieldmap' => array(
      'render element' => 'element',
    ),
    'marketo_ma_user_activity' => array(
      'variables' => array(
        'activity' => array(),
        'email' => NULL,
      ),
    ),
    'marketo_ma_user_lead' => array(
      'variables' => array(
        'lead' => array(),
        'email' => NULL,
        'fields' => array(),
      ),
    ),
  );
  return $theme;
}

/**
 * Theme function for formatting user profile fieldmap form.
 * 
 * @param array $vars
 *   element: Form element
 */
function theme_marketo_ma_user_fieldmap($vars) {
  $element = $vars['element'];

  $table = array(
    'header' => array(
      'drupal' => t('Drupal'),
      'marketo' => t('Marketo'),
    ),
    'rows' => array(),
    'empty' => t('There are currently no user account fields available for mapping. Fields can be managed in <a href="@url">Account settings</a>.', array('@url' => url('admin/config/people/accounts/fields'))),
  );

  foreach (element_children($element) as $key) {
    $row = array();
    $row['data'] = array();
    $row['data'][] = $element[$key]['#title'];
    $row['data'][] = drupal_render($element[$key]);
    $table['rows'][] = $row;
  }

  return theme('table', $table);
}

/**
 * Theme function for formatting lead activity.
 * 
 * @param array $vars
 *   activity: Arrary of activity data
 *   email: Email address associated with activity data
 */
function theme_marketo_ma_user_activity($vars) {
  $activity = $vars['activity'];
  $email = $vars['email'];

  $table = array(
    'header' => array(
      t('ID'),
      t('Date/Time'),
      t('Activity Type'),
      t('Asset Name'),
    ),
    'rows' => array(),
    'empty' => t("No activity found for @mail.", array('@mail' => $email)),
  );

  $fields = array('id', 'activityDateTime', 'activityType', 'mktgAssetName');
  foreach ($activity as $event) {
    $row = array();
    foreach ($fields as $field) {
      $row[] = $event->$field;
    }
    $table['rows'][] = $row;
  }
  return theme('table', $table);
}

/**
 * Theme function for formatting lead data.
 * 
 * @param array $vars
 *   lead: Arrary of lead data
 *   email: Email address associated with activity data
 *   fields: Array of defined Marketo fields
 */
function theme_marketo_ma_user_lead($vars) {
  $leads = $vars['lead'];
  $email = $vars['email'];
  $fields = $vars['fields'];

  $table = array(
    'header' => array(t('Key'), t('Value')),
    'rows' => array(),
    'empty' => t("No lead found for @mail.", array('@mail' => $email)),
  );

  foreach ($leads as $lead) {
    $table['rows'][] = array(
      array(
        'data' => 'ID ' . $lead->Id,
        'colspan' => 2,
        'header' => TRUE,
      ),
    );
    foreach ($lead->attributes as $key => $value) {
      $label = (array_key_exists($key, $fields)) ? $fields[$key] : $key;
      $table['rows'][] = array($label, $value);
    }
  }

  return theme('table', $table);
}
