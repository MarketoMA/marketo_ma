<?php

/**
 * @file
 * Drupal Module: Marketo
 */

/**
 * Implements hook_menu().
 */
function marketo_menu() {
  // Module settings.
  $items['admin/config/search/marketo'] = array(
    'title' => 'Marketo',
    'description' => 'Marketo configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('marketo_admin_settings'),
    'access arguments' => array('administer marketo'),
    'file' => 'includes/marketo.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function marketo_help($path, $arg) {
  switch ($path) {
    case 'admin/config/search/marketo':
      return t("Marketo help text");

    case 'admin/help#marketo':
      $output = '<p>' . t('This is help text for the Marketo module') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function marketo_permission() {
  return array(
    'administer marketo' => array(
      'title' => t('Administer Marketo'),
      'description' => t('Configure Marketo settings such as page visibility, Munchkin keys, and SOAP API endpoint'),
    ),
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function marketo_cron_queue_info() {
  $queues = array();
  $queues['marketo_lead'] = array(
    'worker callback' => '_marketo_associate_lead_soap', // function to call for each item
    'time' => 30, // seconds to spend working on the queue
  );
  return $queues;
}

/**
 * Adds lead information to be captured
 * 
 * @param string $email
 *   A valid email address for this lead
 * @param array $data
 *   Key value pairs of data to be associated with this lead
 * @param boolean $merge
 *   If TRUE, $data will be merged if $email already exists else $data will be replaced
 * @return boolean
 */
function marketo_add_lead($email, $data = array(), $merge = FALSE) {
  $marketo_data = array();
  if (isset($_SESSION['marketo_data'])) {
    $marketo_data = $_SESSION['marketo_data'];
  }

  if ($merge && array_key_exists($email, $marketo_data)) {
    $marketo_data[$email]['data'] = array_merge($marketo_data[$email]['data'], $data);
  }
  else {
    $marketo_data[$email]['data'] = $data;
  }
  $marketo_data[$email]['email'] = $email;

  $_SESSION['marketo_data'] = $marketo_data;
  return TRUE;
}

/**
 * 
 * $queue[email] = array(key => value)
 */
function marketo_get_queue() {
  return (isset($_SESSION['marketo_data'])) ? $_SESSION['marketo_data'] : array();
}

/**
 * Cleanup any mess we made or data we don't want to hold on to
 */
function _marketo_cleanup() {
  unset($_SESSION['marketo_data']);
}

/**
 * Implements hook_page_alter().
 */
function marketo_page_alter(&$page) {
  // @todo add OR if we have munchkin data which needs to be sent
  $marketo_data = marketo_get_queue();
  // drupal_alter('marketo_data', $marketo_data);

  if (_marketo_visibility_pages() || count($marketo_data) > 0) {

    // Basic Munchkin tracking
    _marketo_output_tracking_code();

    foreach ($marketo_data as $lead) {
      if (array_key_exists('email', $lead)) {
        _marketo_associate_lead($lead);
      }
    }

    _marketo_cleanup();
  }
}

function _marketo_output_tracking_code() {
  if (_marketo_munchkin_is_configured()) {
    $marketo_munchkin_account_id = variable_get('marketo_munchkin_account_id');
    $marketo_munchkin_javascript_library = '//' . str_replace(array('http://', 'https://', '//'), '', variable_get('marketo_munchkin_javascript_library'));

    drupal_add_js(array('marketo' => array('track' => TRUE, 'key' => $marketo_munchkin_account_id, 'library' => $marketo_munchkin_javascript_library)), 'setting');
  }
}

/**
 * 
 * @param array $lead
 *   An associative array containing lead data
 *   - email: The email address of this lead
 *   - data: An associative array containing marketo fields and their values
 *     - FirstName
 *     - LastName
 */
function _marketo_associate_lead($lead) {

  // Check to see if there is a default lead source we should apply
  $source = variable_get('marketo_munchkin_lead_source');
  if (!array_key_exists('LeadSource', $lead['data']) && $source !== '') {
    $lead['data']['LeadSource'] = $source;
  }

  $track = variable_get('marketo_tracking_method');
  switch ($track) {
    case 'munchkin':
      _marketo_associate_lead_munchkin($lead);
      break;

    case 'soap_async':
      _marketo_queue_lead($lead);
      break;

    case 'soap':
    default:
      _marketo_associate_lead_soap($lead);
      break;
  }
}

/**
 * 
 * @param array $lead
 */
function _marketo_associate_lead_munchkin($lead) {
  if (_marketo_munchkin_is_configured()) {
    $key = variable_get('marketo_munchkin_api_private_key', NULL);
    watchdog('marketo', 'Associating lead !email [@method] <pre>@data</pre>', array('!email' => $lead['email'], '@method' => 'munchkin', '@data' => print_r($lead['data'], TRUE)));
    $hash = hash('sha1', $key . $lead['email']);
    $action = array(
      'action' => 'associateLead',
      'data' => $lead['data'],
      'hash' => $hash
    );
    drupal_add_js(array('marketo' => array('actions' => array($action))), 'setting');
  }
}

/**
 * 
 * @param array $lead
 * @throws Exception
 */
function _marketo_associate_lead_soap($lead) {
  if (_marketo_soap_is_configured()) {
    module_load_include('inc', 'marketo', 'includes/marketo.soap');

    $secretKey = variable_get('marketo_soap_encryption_key');
    $accessKey = variable_get('marketo_soap_user_id');
    $soapEndPoint = variable_get('marketo_soap_endpoint');

    watchdog('marketo', 'Associating lead !email [@method] <pre>@data</pre>', array('!email' => $lead['email'], '@method' => 'soap', '@data' => print_r($lead['data'], TRUE)), WATCHDOG_INFO);
    try {
      $client = new marketoClient($accessKey, $secretKey, $soapEndPoint);
      $result = $client->syncLead($lead['email'], $lead['data']);
      if (!$result) {
        throw new Exception('No response from SOAP request');
      }
    } catch (Exception $e) {
      watchdog('marketo', 'Unable to sync lead !email.<pre>@error</pre>', array('!email' => $lead['email'], '@error' => $e->getMessage()), WATCHDOG_ERROR);
    }
  }
}

/**
 * Add a lead to the queue for submission later
 * @param array $lead
 * @return boolean
 */
function _marketo_queue_lead($lead) {
  watchdog('marketo', 'Queing lead !email [@method] <pre>@data</pre>', array('!email' => $lead['email'], '@method' => 'queued', '@data' => print_r($lead['data'], TRUE)), WATCHDOG_INFO);
  $queue = DrupalQueue::get('marketo_lead', TRUE);
  $success = $queue->createItem($lead);
  return $success;
}

function _marketo_get_fields() {
  module_load_include('inc', 'marketo', 'includes/marketo.soap');

  $secretKey = variable_get('marketo_soap_encryption_key', NULL);
  $accessKey = variable_get('marketo_soap_user_id', NULL);
  $soapEndPoint = variable_get('marketo_soap_endpoint', NULL);

  $result = array();

  if ($secretKey && $accessKey && $soapEndPoint) {
    try {
      $client = new marketoClient($accessKey, $secretKey, $soapEndPoint);
      $result = $client->getFields();
      if (!$result) {
        throw new Exception('No response from SOAP request');
      }
    } catch (Exception $e) {
      watchdog('marketo', 'Unable to retrieve field information. <pre>@error</pre>', array('error' => $e->getMessage()));
    }
  }

  return $result;
}

function _marketo_munchkin_is_configured() {
  static $configured;

  if (!isset($configured)) {
    if (
        variable_get('marketo_munchkin_account_id', FALSE) &&
        variable_get('marketo_munchkin_api_private_key', FALSE) &&
        variable_get('marketo_munchkin_javascript_library', FALSE)
    ) {
      $configured = TRUE;
    }
    else {
      $configured = FALSE;
    }
  }
  return $configured;
}

function _marketo_soap_is_configured() {
  static $configured;

  if (!isset($configured)) {
    if (
        variable_get('marketo_soap_encryption_key', FALSE) &&
        variable_get('marketo_soap_endpoint', FALSE) &&
        variable_get('marketo_soap_user_id', FALSE)
    ) {
      $configured = TRUE;
    }
    else {
      $configured = FALSE;
    }
  }
  return $configured;
}

/**
 * Based on visibility setting this function returns TRUE if Marketo code should
 * be added to the current page and otherwise FALSE.
 */
function _marketo_visibility_pages() {
  static $page_match;
  module_load_include('inc', 'marketo', 'includes/marketo');

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = variable_get('marketo_visibility_pages', 0);
    $setting_pages = variable_get('marketo_pages', MARKETO_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }
  }
  return $page_match;
}
