<?php

/**
 * @file
 * Drupal Module: Marketo
 */

/**
 * Implements hook_menu().
 */
function marketo_menu() {
  // Module settings.
  $items['admin/config/search/marketo'] = array(
    'title' => 'Marketo',
    'description' => 'Marketo configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('marketo_admin_settings'),
    'access arguments' => array('administer marketo'),
    'file' => 'includes/marketo.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function marketo_help($path, $arg) {
  switch ($path) {
    case 'admin/config/search/marketo':
      return t("Marketo help text");

    case 'admin/help#marketo':
      $output = '<p>' . t('This is help text for the Marketo module') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function marketo_permission() {
  return array(
    'administer marketo' => array(
      'title' => t('Administer Marketo'),
      'description' => t('Configure Marketo settings such as page visibility, Munchkin keys, and SOAP API endpoint'),
    ),
  );
}

/**
 * Handles storage of marketo data which will ultimately be submitted
 * @param type $data 
 * @return type 
 */
function marketo_prepare_data($data = array()) {
  // TODO: consider drupal_static
  $marketo_data = array();
  if (isset($_SESSION['marketo_data'])) {
    $marketo_data = $_SESSION['marketo_data'];
  }

  if (!empty($data)) {
    // some data has been supplied which we should merge in
    $marketo_data = array_merge($marketo_data, $data);
  }

  $_SESSION['marketo_data'] = $marketo_data;
  return $marketo_data;
}

/**
 * Cleanup any mess we made or data we don't want to hold on to
 */
function _marketo_cleanup() {
  unset($_SESSION['marketo_data']);
}

/**
 * Implements hook_page_alter().
 */
function marketo_page_alter(&$page) {
  if (_marketo_visibility_pages()) {

    // Basic Munchkin tracking
    _marketo_output_tracking_code();

    $marketo_data = marketo_prepare_data();
    drupal_alter('marketo_data', $marketo_data);

    // Handle any lead capture needs
    if (isset($marketo_data['Email']) && $marketo_data['Email'] !== '') {
      // This is only possible if we have an email address
      _marketo_associate_lead($marketo_data['Email'], $marketo_data);
    }

    _marketo_cleanup();
  }
}

function _marketo_output_tracking_code() {
  $marketo_munchkin_tracking_code_type = variable_get('marketo_munchkin_tracking_code_type');
  $marketo_munchkin_account_id = variable_get('marketo_munchkin_account_id');
  $marketo_munchkin_javascript_library = '//' . str_replace(array('http://', 'https://', '//'), '', variable_get('marketo_munchkin_javascript_library'));

  drupal_add_js(array('marketo' => array('track' => TRUE, 'key' => $marketo_munchkin_account_id, 'library' => $marketo_munchkin_javascript_library)), 'setting');
}

function _marketo_associate_lead($email, $data) {

  // Check to see if there is a default lead source we should apply
  $source = variable_get('marketo_munchkin_lead_source');
  if (!array_key_exists('LeadSource', $data) && $source !== '') {
    $data['LeadSource'] = $source;
  }

  $track = variable_get('marketo_tracking_method');
  watchdog('marketo', 'Associating data with lead !email. [Method = @track] <pre>@data</pre>', array('!email' => $email, '@track' => $track, '@data' => json_encode($data)), WATCHDOG_INFO);

  switch ($track) {
    case 'munchkin':
      $key = variable_get('marketo_munchkin_api_private_key', '');
      $hash = hash('sha1', $key . $email);
      drupal_add_js(array('marketo' => array('lead_type' => 'associateLead', 'data' => $data, 'hash' => $hash)), 'setting');
      break;

    case 'soap':
    default:
      module_load_include('inc', 'marketo', 'includes/marketo.soap');

      $secretKey = variable_get('marketo_soap_encryption_key', NULL);
      $accessKey = variable_get('marketo_soap_user_id', NULL);
      $soapEndPoint = variable_get('marketo_soap_endpoint', NULL);

      if ($secretKey && $accessKey && $soapEndPoint) {
        try {
          $client = new marketoClient($accessKey, $secretKey, $soapEndPoint);
          $result = $client->syncLead($email, $data);
          if (!$result) {
            throw new Exception('No response from SOAP request');
          }
        } catch (Exception $e) {
          watchdog('marketo', 'Unable to sync lead !email.<pre>@error</pre>', array('!email' => $email, '@error' => $e->getMessage()), WATCHDOG_ERROR);
        }
      }
      break;
  }
}

function _marketo_get_fields() {
  module_load_include('inc', 'marketo', 'includes/marketo.soap');

  $secretKey = variable_get('marketo_soap_encryption_key', NULL);
  $accessKey = variable_get('marketo_soap_user_id', NULL);
  $soapEndPoint = variable_get('marketo_soap_endpoint', NULL);

  $result = array();

  if ($secretKey && $accessKey && $soapEndPoint) {
    try {
      $client = new marketoClient($accessKey, $secretKey, $soapEndPoint);
      $result = $client->getFields();
      if (!$result) {
        throw new Exception('No response from SOAP request');
      }
    } catch (Exception $e) {
      watchdog('marketo', 'Unable to retrieve field information. <pre>@error</pre>', array('error' => $e->getMessage()));
    }
  }

  return $result;
}

/**
 * Based on visibility setting this function returns TRUE if Marketo code should
 * be added to the current page and otherwise FALSE.
 */
function _marketo_visibility_pages() {
  static $page_match;
  module_load_include('inc', 'marketo', 'includes/marketo');

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = variable_get('marketo_visibility_pages', 0);
    $setting_pages = variable_get('marketo_pages', MARKETO_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }
  }
  return $page_match;
}
